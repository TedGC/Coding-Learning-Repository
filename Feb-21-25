function makeColor(r,g,b) {
  const color ={}
  color.r = r;
  color.g = g;
  color.b = b;
  color.rgb = funciton() {
    const {r, g, b} = this;
    return `rgb${r}, ${g}, ${b}`;
  }
  color.hex = funciton() {
    const { r, g, b} = this;
    return '#' + ((1 <<24) + (r <<16) + (g << 8) +b).toString(16).slice(1);
  } return color;
}  

const firstColor = makeColor(35, 255, 150)


/// PROTOTYPE

function color(r, g, b) {
  this.r = r;
  this.g = g;
  this.b = b;
}

Color.prototype.rgb = function() {
  const {r, g, b} = this;
  return `rgb(${r}, ${g}, ${b})`
}


Color.prototype.rgb = function() {
  const {r, g, b} = this;
  return '#' + ((1 <<24) + (r <<16) + (g << 8) +b).toString(16).slice(1);
}

const color1 = new Color(40, 50, 60);
const color2 = new Color(0, 0,0) 

class Color {
  constructor(r,g,b) {
    console.log('INSIDE CONSTRUCTOR')
    console.log(r,g,b) 
  }
}

const c1 = new Color(255, 68, 90)



class Color {
  constructor(r, g, b, name) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.name = name;}
  innerRGB() {
    const {r, g, b} = this;
    return `${r}, ${g}, ${b};
  }
  rgb() {
    return `rgb(${this.innerRBG()})`
  }
}

const test = {
  prop = 42
  function() {
    return this.prop
  }

console.log(test.function()) 

//TIMER APPLICATION 

